// ^^^^^^^^^^^ Above you can try the macro using ^^^^^^^^^^^
// import myMacro, { JSXMacro } from 'AnyNameThatEndsIn.macro';
// // (note: in reality, the AnyNameThatEndsIn.macro should be the name of your package
// // for example: `codegen.macro`)
// const functionCall = myMacro('Awesome');
// const jsx = <JSXMacro cool="right!?">Hi!</JSXMacro>;
// const templateLiteral = myMacro`hi ${'there'}`;
// literallyAnythingWorks(myMacro);

// `createMacro` is simply a function that ensures your macro is only
// called in the context of a babel transpilation and will throw an
// error with a helpful message if someone does not have babel-plugin-macros
// configured correctly
module.exports = createMacro(myMacro);

function myMacro({ references, state, babel }) {
  // `state` is the second argument you're passed to a visitor in a
  // normal babel plugin. `babel` is the `@babel/core` module.
  // do whatever you like to the AST paths you find in `references`.
  // open up the console to see what's logged and start playing around!

  // references.default refers to the default import (`myMacro` above)
  // references.JSXMacro refers to the named import of `JSXMacro`
  const { JSXMacro = [], default: defaultImport = [] } = references;

  defaultImport.forEach(referencePath => {
    if (referencePath.parentPath.type === "TaggedTemplateExpression") {
      console.log("template literal contents", referencePath.parentPath.get("quasi"));
    } else if (referencePath.parentPath.type === "CallExpression") {
      if (referencePath === referencePath.parentPath.get("callee")) {
        console.log(
          "function call arguments (as callee)",
          referencePath.parentPath.get("arguments")
        );
      } else if (referencePath.parentPath.get("arguments").includes(referencePath)) {
        console.log(
          "function call arguments (as argument)",
          referencePath.parentPath.get("arguments")
        );
      }
    } else {
      // throw a helpful error message or something :)
    }
  });

  JSXMacro.forEach(referencePath => {
    if (referencePath.parentPath.type === "JSXOpeningElement") {
      console.log("jsx props", {
        attributes: referencePath.parentPath.get("attributes"),
        children: referencePath.parentPath.parentPath.get("children")
      });
    } else {
      // throw a helpful error message or something :)
    }
  });
}
